@model SafeTracSecondTest.Models.Dto.UserFilterDTO

@{
    ViewBag.Title = "Index";
    ViewData["Users"] = Model.UserDTOs;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm())
{
    <table class="table" id="usersTable">
        <tr>
            <th onclick="sortUsers(0)">
                First Name
                <span id="spanFirstName" onclick="sortUsersByFirstName()" class="glyphicon glyphicon-triangle-bottom"></span>
                @Html.EditorFor(x => x.First_Name, new { @class = "form-control", @onchange = "sortUsers();" })
            </th>
            <th onclick="sortUsers(1)">
                Surname
                <span id="spanLastName" onclick="sortUsersByLastName()" class="glyphicon glyphicon-triangle-bottom"></span>
                @Html.EditorFor(x => x.Last_Name, new { @class = "form-control", @onchange = "sortUsers();" })
            </th>
            <th onclick="sortUsers(2)">
                Email
                <span id="spanEmail" onclick="sortUsersByEmail()" class="glyphicon glyphicon-triangle-bottom"></span>
                @Html.EditorFor(x => x.Email_Address, new { @class = "form-control", @onchange = "sortUsers();" })
            </th>
            <th onclick="sortUsers(3)">
                Date Created
                <span id="spanDate" onclick="sortUsersByDate()" class="glyphicon glyphicon-triangle-bottom"></span>
                @Html.EditorFor(x => x.Date_Created, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
            </th>
            <th></th>
        </tr>
        @foreach (var item in ViewData["Users"] as IList<SafeTracSecondTest.Models.Dto.UserDTO>)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.First_Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Last_Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email_Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date_Created_AU_Format)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>
    <input type="submit" value="Search" class="btn btn-default" />
}

<script type="text/javascript">
    function sortUsers(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("usersTable");
        switching = true;
        dir = "asc";
        while (switching) {
            switching = false;
            rows = table.rows;

            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

    function sortUsersByFirstName() {
        var checkClass = document.getElementById("spanFirstName").classList.contains('glyphicon-triangle-bottom');
        switch (checkClass) {
            case true:
                document.getElementById("spanFirstName").classList.add('glyphicon-triangle-top');
                document.getElementById("spanFirstName").classList.remove('glyphicon-triangle-bottom');
                break;
            case false:
                document.getElementById("spanFirstName").classList.add('glyphicon-triangle-bottom');
                document.getElementById("spanFirstName").classList.remove('glyphicon-triangle-top');
                break;
        }
    }

    function sortUsersByLastName() {

        var checkClass = document.getElementById("spanLastName").classList.contains('glyphicon-triangle-bottom');

        switch (checkClass) {
            case true:
                document.getElementById("spanLastName").classList.add('glyphicon-triangle-top');
                document.getElementById("spanLastName").classList.remove('glyphicon-triangle-bottom');
                break;
            case false:
                document.getElementById("spanLastName").classList.add('glyphicon-triangle-bottom');
                document.getElementById("spanLastName").classList.remove('glyphicon-triangle-top');
                break;
        }
    }

    function sortUsersByEmail() {

        var checkClass = document.getElementById("spanEmail").classList.contains('glyphicon-triangle-bottom');

        switch (checkClass) {
            case true:
                document.getElementById("spanEmail").classList.add('glyphicon-triangle-top');
                document.getElementById("spanEmail").classList.remove('glyphicon-triangle-bottom');
                break;
            case false:
                document.getElementById("spanEmail").classList.add('glyphicon-triangle-bottom');
                document.getElementById("spanEmail").classList.remove('glyphicon-triangle-top');
                break;
        }
    }

    function sortUsersByDate() {

        var checkClass = document.getElementById("spanDate").classList.contains('glyphicon-triangle-bottom');

        switch (checkClass) {
            case true:
                document.getElementById("spanDate").classList.add('glyphicon-triangle-top');
                document.getElementById("spanDate").classList.remove('glyphicon-triangle-bottom');
                break;
            case false:
                document.getElementById("spanDate").classList.add('glyphicon-triangle-bottom');
                document.getElementById("spanDate").classList.remove('glyphicon-triangle-top');
                break;
        }
    }

</script>
